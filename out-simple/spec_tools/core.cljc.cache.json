["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ ","~$spec","~$spec-tools.core"],"~:excludes",["~#set",["~$-name","~$merge"]],"~:name","^4","~:imports",null,"~:requires",["^ ","~$form","~$spec-tools.form","~$set","~$clojure.set","~$clojure.spec.alpha","~$cljs.spec.alpha","~$spec-tools.transform","^B","~$goog.date.UtcDateTime","^C","~$impl","~$spec-tools.impl","^E","^E","~$spec-tools.parse","^F","~$gen","~$cljs.spec.gen.alpha","^?","^?","~$stt","^B","~$s","^A","^=","^=","^A","^A","~$parse","^F","~$cljs.reader","^K","^H","^H"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$create-spec",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","~:line",500,"~:column",7,"~:end-line",500,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^X",[[["^ ","~:keys",["^3","~$type","^<"],"~:as","~$m"]]]]]],"~:doc","Creates a Spec instance from a map containing the following keys:\n\n           :spec  the wrapped spec predicate (default to `any?`)\n           :form  source code of the spec predicate, if :spec is a spec,\n                  :form is read with `s/form` out of it. For non-spec\n                  preds, spec-tools.form/resolve-form is called, if still\n                  not available, spec-creation will fail.\n           :type  optional type for the spec. if not set, will be auto-\n                  resolved via spec-tools.parse/parse-spec (optional)\n         :reason  reason to be added to problems with s/explain (optional)\n            :gen  generator function for the spec (optional)\n           :name  name of the spec (optional)\n    :description  description of the spec (optional)\n          :xx/yy  any qualified keys can be added (optional)"],"^9","~$spec-tools.core/create-spec","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",18,"~:method-params",["^X",[["~$p__4583"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^T",1,"~:variadic?",false,"^S",500,"~:ret-tag",["^6",["~$spec-tools.core/Spec","~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^U",500,"~:max-fixed-arity",1,"~:fn-var",true,"^W",["^X",["^Y",["^X",[[["^ ","^Z",["^3","^[","^<"],"^10","~$m"]]]]]],"^11","Creates a Spec instance from a map containing the following keys:\n\n           :spec  the wrapped spec predicate (default to `any?`)\n           :form  source code of the spec predicate, if :spec is a spec,\n                  :form is read with `s/form` out of it. For non-spec\n                  preds, spec-tools.form/resolve-form is called, if still\n                  not available, spec-creation will fail.\n           :type  optional type for the spec. if not set, will be auto-\n                  resolved via spec-tools.parse/parse-spec (optional)\n         :reason  reason to be added to problems with s/explain (optional)\n            :gen  generator function for the spec (optional)\n           :name  name of the spec (optional)\n    :description  description of the spec (optional)\n          :xx/yy  any qualified keys can be added (optional)"],"~$conform!",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",203,"^T",7,"^U",203,"^V",15,"^W",["^X",["^Y",["^X",[["^3","~$value"],["^3","^1@","~$transformer"]]]]],"^11","Given a spec and a value, returns the possibly destructured value\n   or fails with ex-info with :type of ::conform. ex-data also contains\n   :problems, :spec and :value. call s/unform on the result to get the\n   actual conformed value.","~:top-fn",["^ ","^17",false,"~:fixed-arity",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]]],"^9","~$spec-tools.core/conform!","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",15,"^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]],"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^15",null,"^1C",3,"^16",["^X",[null,null]],"^T",1,"^17",false,"~:methods",[["^ ","^1C",2,"^17",false,"~:tag","~$any"],["^ ","^1C",3,"^17",false]],"^S",203,"^U",203,"^1=",3,"^1>",true,"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^11","Given a spec and a value, returns the possibly destructured value\n   or fails with ex-info with :type of ::conform. ex-data also contains\n   :problems, :spec and :value. call s/unform on the result to get the\n   actual conformed value."],"~$fail-on-invoke",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",359,"^T",8,"^U",359,"^V",22,"~:private",true,"^W",["^X",["^Y",["^X",[["^3"]]]]]],"^1I",true,"^9","~$spec-tools.core/fail-on-invoke","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",22,"^13",["^X",[["^3"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",359,"^18","~$ignore","^U",359,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3"]]]]]],"~$encode",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",250,"^T",7,"^U",250,"^V",13,"^W",["^X",["^Y",["^X",[["^3","^1@","^1A"]]]]],"^11","Transforms a value (using a [[Transformer]]) from external\n  format into a value defined by the spec. On error, returns `::s/invalid`."],"^9","~$spec-tools.core/encode","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",13,"^13",["^X",[["^3","^1@","^1A"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",250,"^U",250,"^1=",3,"^1>",true,"^W",["^X",["^Y",["^X",[["^3","^1@","^1A"]]]]],"^11","Transforms a value (using a [[Transformer]]) from external\n  format into a value defined by the spec. On error, returns `::s/invalid`."],"~$->t_spec_tools$core4468",["^ ","^P",null,"^Q",["^ ","~:anonymous",true,"~:protocols",["^6",["~$cljs.core/IMeta","~$spec-tools.core/Transformer","~$cljs.core/IWithMeta"]],"~:skip-protocol-flag",["^6",["^1Q","^1S"]],"~:factory","~:positional","^W",["^X",["^Y",["^X",[["~$options","~$encoders","~$decoders","~$map__4463","~$default-decoder","~$transformer-name","~$encode-key","~$decode-key","~$->opts","~$default-encoder","~$options-or-transformers","~$meta4469"]]]]],"^11","Positional factory function for spec-tools.core/t_spec_tools$core4468.","^R",null],"^1P",["^6",["^1Q","^1R","^1S"]],"^9","~$spec-tools.core/->t_spec_tools$core4468","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^13",["^X",[["^1W","^1X","^1Y","^1Z","^1[","^20","^21","^22","^23","^24","^25","^26"]]],"^15",null,"^16",["^X",[null,null]],"^1O",true,"^T",7,"^17",false,"^1U","^1V","^S",127,"^18","~$spec-tools.core/t_spec_tools$core4468","^1=",12,"^1>",true,"^W",["^X",["^Y",["^X",[["^1W","^1X","^1Y","^1Z","^1[","^20","^21","^22","^23","^24","^25","^26"]]]]],"^1T",["^6",["^1Q","^1S"]],"^11","Positional factory function for spec-tools.core/t_spec_tools$core4468."],"~$t_spec_tools$core4468",["^ ","~:num-fields",12,"^1P",["^6",["^1Q","^1R","^1S"]],"^9","^28","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","~:type",true,"^1O",true,"^T",7,"^S",127,"~:record",false,"^1F","~$function","^1T",["^6",["^1Q","^1S"]]],"~$t_spec_tools$core4593",["^ ","^2:",5,"^1P",["^6",["~$cljs.spec.alpha/Spec","^1Q","^1S"]],"^9","~$spec-tools.core/t_spec_tools$core4593","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^2;",true,"^1O",true,"^T",14,"^S",583,"^2<",false,"^1F","^2=","^1T",["^6",["^1Q","^1S"]]],"~$decompose-spec-type",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",369,"^T",8,"^U",369,"^V",27,"^1I",true,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Dynamic conforming can't walk over composite specs like s/and & s/or.\n  So, we'll use the first type. Examples:\n\n     `[:and [:int :string]]` -> `:int`\n     `[:or [:string :keyword]]` -> `:string`"],"^1I",true,"^9","~$spec-tools.core/decompose-spec-type","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",27,"^13",["^X",[["^3"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",369,"^18",["^6",[null,"^1:","^1G"]],"^U",369,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Dynamic conforming can't walk over composite specs like s/and & s/or.\n  So, we'll use the first type. Examples:\n\n     `[:and [:int :string]]` -> `:int`\n     `[:or [:string :keyword]]` -> `:string`"],"~$string-transformer",["^ ","^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",148,"^T",6,"^U",148,"^V",24],"^9","~$spec-tools.core/string-transformer","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",24,"^T",1,"^S",148,"^U",148,"^1F","^28","^11","Transformer that transforms data between Strings and EDN."],"~$decode",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",232,"^T",7,"^U",232,"^V",13,"^W",["^X",["^Y",["^X",[["^3","^1@"],["^3","^1@","^1A"]]]]],"^11","Decodes a value using a [[Transformer]] from external format to a value\n  defined by the spec. First, calls [[coerce]] and returns the value if it's\n  valid - otherwise, calls [[conform]] & [[unform]]. Returns `::s/invalid`\n  if the value can't be decoded to conform the spec.","^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]]],"^9","~$spec-tools.core/decode","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",13,"^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]],"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^15",null,"^1C",3,"^16",["^X",[null,null]],"^T",1,"^17",false,"^1E",[["^ ","^1C",2,"^17",false,"^1F","^1G"],["^ ","^1C",3,"^17",false,"^1F",["^6",[null,"^1G"]]]],"^S",232,"^U",232,"^1=",3,"^1>",true,"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^11","Decodes a value using a [[Transformer]] from external format to a value\n  defined by the spec. First, calls [[coerce]] and returns the value if it's\n  valid - otherwise, calls [[conform]] & [[unform]]. Returns `::s/invalid`\n  if the value can't be decoded to conform the spec."],"~$json-transformer",["^ ","^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",140,"^T",6,"^U",140,"^V",22],"^9","~$spec-tools.core/json-transformer","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",22,"^T",1,"^S",140,"^U",140,"^1F","^28","^11","Transformer that transforms data between JSON and EDN."],"~$map-spec-keys",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",574,"^T",8,"^U",574,"^V",21,"^1I",true,"^W",["^X",["^Y",["^X",[["^3"]]]]]],"^1I",true,"^9","~$spec-tools.core/map-spec-keys","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",21,"^13",["^X",[["^3"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",574,"^18","^1:","^U",574,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3"]]]]]],"~$serialize",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",57,"^T",19,"^U",57,"^V",28,"~:skip-wiki",true,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Writes specs into a string that can be read by the reader.\n  TODO: Should optionally write the related Registry entries."],"^9","~$spec-tools.core/serialize","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",28,"^13",["^X",[["^3"]]],"^15",null,"^2L",true,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",57,"^18","~$string","^U",57,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Writes specs into a string that can be read by the reader.\n  TODO: Should optionally write the related Registry entries."],"~$-options",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",82,"^T",4,"^U",82,"^V",12,"~:protocol","^1R","^11",null,"^W",["^X",["^Y",["^X",[["~$this"]]]]]],"^2P","^1R","^9","~$spec-tools.core/-options","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",12,"^13",["^X",[["^2Q"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",80,"^18","^1G","^U",82,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^2Q"]]]]],"^11",null],"~$coerce-spec",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",45,"^T",19,"^U",45,"^V",30,"^2L",true,"^W",["^X",["^Y",["^X",[["~$name-or-spec"]]]]],"^11","Returns a spec from a spec name or spec. Throws exception\n  if no spec was found."],"^9","~$spec-tools.core/coerce-spec","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",30,"^13",["^X",[["^2T"]]],"^15",null,"^2L",true,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",45,"^18",["^6",[null,"^1G"]],"^U",45,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^2T"]]]]],"^11","Returns a spec from a spec name or spec. Throws exception\n  if no spec was found."],"~$explain",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",178,"^T",7,"^U",178,"^V",14,"^W",["^X",["^Y",["^X",[["^3","^1@"],["^3","^1@","^1A"]]]]],"^11","Like `clojure.core.alpha/explain` but supports transformers","^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]]],"^9","~$spec-tools.core/explain","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",14,"^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]],"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^15",null,"^1C",3,"^16",["^X",[null,null]],"^T",1,"^17",false,"^1E",[["^ ","^1C",2,"^17",false,"^1F","^1G"],["^ ","^1C",3,"^17",false]],"^S",178,"^U",178,"^1=",3,"^1>",true,"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^11","Like `clojure.core.alpha/explain` but supports transformers"],"~$spec-name",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",479,"^T",7,"^U",479,"^V",16,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Returns a spec name. Like the private clojure.spec.alpha/spec-name"],"^9","~$spec-tools.core/spec-name","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",16,"^13",["^X",[["^3"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",479,"^18",["^6",["^1G","~$cljs.core/Keyword","~$cljs.core/Symbol","^1<"]],"^U",479,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Returns a spec name. Like the private clojure.spec.alpha/spec-name"],"~$select-spec",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",261,"^T",7,"^U",261,"^V",18,"^W",["^X",["^Y",["^X",[["^3","^1@"]]]]],"^11","Best effort to drop recursively all extra keys out of a keys spec value."],"^9","~$spec-tools.core/select-spec","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",18,"^13",["^X",[["^3","^1@"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",261,"^18","^1G","^U",261,"^1=",2,"^1>",true,"^W",["^X",["^Y",["^X",[["^3","^1@"]]]]],"^11","Best effort to drop recursively all extra keys out of a keys spec value."],"~$Spec",["^ ","^2:",3,"^1P",["^6",["~$cljs.core/IRecord","^2?","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/IFn","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","^1Q","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$spec-tools.core/Coercion","^1S","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^9","^19","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",16,"^2;",true,"^T",12,"~:internal-ctor",true,"^S",381,"^2<",true,"^U",381,"^1F","^2=","^1T",["^6",["^33","^34","^35","^36","^37","^38","^39","^3:","^1Q","^3;","^3<","^3=","^1S","^3?","^3@","^3A"]]],"~$walk",["^ ","^9","~$spec-tools.core/walk","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",270,"^T",1,"^U",270,"^V",15,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",270,"^T",11,"^U",270,"^V",15],"^1F","~$cljs.core/MultiFn"],"~$strip-extra-values-transformer",["^ ","^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",162,"^T",6,"^U",162,"^V",36],"^9","~$spec-tools.core/strip-extra-values-transformer","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",36,"^T",1,"^S",162,"^U",162,"^1F","^28","^11","Transformer that drop extra values from `s/tuple` specs."],"^7",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",81,"^T",4,"^U",81,"^V",9,"^2P","^1R","^11",null,"^W",["^X",["^Y",["^X",[["^2Q"]]]]]],"^2P","^1R","^9","~$spec-tools.core/-name","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",9,"^13",["^X",[["^2Q"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",80,"^18","^1G","^U",81,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^2Q"]]]]],"^11",null],"~$spec-description",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",495,"^T",7,"^U",495,"^V",23,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Returns a spec description."],"^9","~$spec-tools.core/spec-description","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",23,"^13",["^X",[["^3"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",495,"^18",["^6",["^1G","^1<"]],"^U",495,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3"]]]]],"^11","Returns a spec description."],"~$fail-on-extra-keys-transformer",["^ ","^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",168,"^T",6,"^U",168,"^V",36],"^9","~$spec-tools.core/fail-on-extra-keys-transformer","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",36,"^T",1,"^S",168,"^U",168,"^1F","^28","^11","Transformer that fails on extra keys in `s/keys` specs."],"~$spec?",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",476,"^T",7,"^U",476,"^V",12,"^W",["^X",["^Y",["^X",[["~$x"]]]]]],"^9","~$spec-tools.core/spec?","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",12,"^13",["^X",[["~$x"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",476,"^18",["^6",["^19","^1<"]],"^U",476,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["~$x"]]]]]],"~$->Spec",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",16,"^T",12,"^3B",true,"^1U","^1V","^S",381,"^U",381,"^W",["^X",["^Y",["^X",[["^3","^<","^["]]]]],"^11","Positional factory function for spec-tools.core/Spec."],"^9","~$spec-tools.core/->Spec","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",16,"^13",["^X",[["^3","^<","^["]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^3B",true,"^17",false,"^1U","^1V","^S",381,"^18","^19","^U",381,"^1=",3,"^1>",true,"^W",["^X",["^Y",["^X",[["^3","^<","^["]]]]],"^11","Positional factory function for spec-tools.core/Spec."],"~$registry",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",29,"^T",19,"^U",29,"^V",27,"^2L",true,"^W",["^X",["^Y",["^X",[[],["~$re"]]]]],"^1B",["^ ","^17",false,"^1C",1,"^1=",1,"^13",[[],["^3R"]],"^W",["^X",[[],["^3R"]]],"^16",["^X",[null,null]]]],"^9","~$spec-tools.core/registry","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",27,"^1B",["^ ","^17",false,"^1C",1,"^1=",1,"^13",[[],["^3R"]],"^W",["^X",[[],["^3R"]]],"^16",["^X",[null,null]]],"^13",[[],["^3R"]],"^15",null,"^1C",1,"^2L",true,"^16",["^X",[null,null]],"^T",1,"^17",false,"^1E",[["^ ","^1C",0,"^17",false,"^1F","^1G"],["^ ","^1C",1,"^17",false,"^1F",["^6",[null,"^1:","^1G"]]]],"^S",29,"^U",29,"^1=",1,"^1>",true,"^W",["^X",[[],["^3R"]]]],"~$extra-spec-map",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",352,"^T",8,"^U",352,"^V",22,"^1I",true,"^W",["^X",["^Y",["^X",[["~$data"]]]]]],"^1I",true,"^9","~$spec-tools.core/extra-spec-map","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",22,"^13",["^X",[["^3U"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",352,"^18",["^6",[null,"^1G"]],"^U",352,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3U"]]]]]],"~$explain-data",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",186,"^T",7,"^U",186,"^V",19,"^W",["^X",["^Y",["^X",[["^3","^1@"],["^3","^1@","^1A"]]]]],"^11","Like `clojure.core.alpha/explain-data` but supports transformers","^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]]],"^9","~$spec-tools.core/explain-data","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",19,"^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]],"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^15",null,"^1C",3,"^16",["^X",[null,null]],"^T",1,"^17",false,"^1E",[["^ ","^1C",2,"^17",false,"^1F","^1G"],["^ ","^1C",3,"^17",false]],"^S",186,"^U",186,"^1=",3,"^1>",true,"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^11","Like `clojure.core.alpha/explain-data` but supports transformers"],"~$conform",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",194,"^T",7,"^U",194,"^V",14,"^W",["^X",["^Y",["^X",[["^3","^1@"],["^3","^1@","^1A"]]]]],"^11","Given a spec and a value, returns the possibly destructured value\n   or ::s/invalid","^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]]],"^9","~$spec-tools.core/conform","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",14,"^1B",["^ ","^17",false,"^1C",3,"^1=",3,"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^16",["^X",[null,null]]],"^13",[["^3","^1@"],["^3","^1@","^1A"]],"^15",null,"^1C",3,"^16",["^X",[null,null]],"^T",1,"^17",false,"^1E",[["^ ","^1C",2,"^17",false,"^1F","^1G"],["^ ","^1C",3,"^17",false]],"^S",194,"^U",194,"^1=",3,"^1>",true,"^W",["^X",[["^3","^1@"],["^3","^1@","^1A"]]],"^11","Given a spec and a value, returns the possibly destructured value\n   or ::s/invalid"],"~$-decoder",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",84,"^T",4,"^U",84,"^V",12,"^2P","^1R","^11",null,"^W",["^X",["^Y",["^X",[["^2Q","^3","^1@"]]]]]],"^2P","^1R","^9","~$spec-tools.core/-decoder","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",12,"^13",["^X",[["^2Q","^3","^1@"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",80,"^18","^1G","^U",84,"^1=",3,"^1>",true,"^W",["^X",["^Y",["^X",[["^2Q","^3","^1@"]]]]],"^11",null],"~$map->Spec",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",16,"^T",12,"^3B",true,"^1U","~:map","^S",381,"^U",381,"^W",["^X",["^Y",["^X",[["~$G__4564"]]]]],"^11","Factory function for spec-tools.core/Spec, taking a map of keywords to field values."],"^9","~$spec-tools.core/map->Spec","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",16,"^13",["^X",[["^43"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^3B",true,"^17",false,"^1U","^42","^S",381,"^18","^19","^U",381,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^43"]]]]],"^11","Factory function for spec-tools.core/Spec, taking a map of keywords to field values."],"~$merge-impl",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",581,"^T",19,"^U",581,"^V",29,"^2L",true,"^W",["^X",["^Y",["^X",[["~$forms","~$spec-form","~$merge-spec"]]]]]],"^9","~$spec-tools.core/merge-impl","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",29,"^13",["^X",[["^46","^47","^48"]]],"^15",null,"^2L",true,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",581,"^18",["^6",["^19","^1:","^1;","^1<"]],"^U",581,"^1=",3,"^1>",true,"^W",["^X",["^Y",["^X",[["^46","^47","^48"]]]]]],"~$-encoder",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",83,"^T",4,"^U",83,"^V",12,"^2P","^1R","^11",null,"^W",["^X",["^Y",["^X",[["^2Q","^3","^1@"]]]]]],"^2P","^1R","^9","~$spec-tools.core/-encoder","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",12,"^13",["^X",[["^2Q","^3","^1@"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",80,"^18","^1G","^U",83,"^1=",3,"^1>",true,"^W",["^X",["^Y",["^X",[["^2Q","^3","^1@"]]]]],"^11",null],"~$get-spec",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",37,"^T",19,"^U",37,"^V",27,"^2L",true,"^W",["^X",["^Y",["^X",[["~$name"]]]]],"^11","Finds recursively a spec implementation from the registry"],"^9","~$spec-tools.core/get-spec","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",27,"^13",["^X",[["^4="]]],"^15",null,"^2L",true,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",37,"^18",["^6",["^1G","^1<"]],"^U",37,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^4="]]]]],"^11","Finds recursively a spec implementation from the registry"],"~$*transformer*",["^ ","^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",74,"^T",26,"^U",74,"^V",39,"^1I",true,"~:dynamic",true],"^1I",true,"^9","~$spec-tools.core/*transformer*","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",39,"^T",1,"^4@",true,"^S",74,"^U",74,"^1F","^1G"],"~$Coercion",["^ ","^Q",["^ ","~:protocol-symbol",true,"^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",22,"^T",14,"^S",77,"~:protocol-info",["^ ","^1E",["^ ","~$-coerce",[["^2Q","^1@","^1A","^1W"]]]],"^U",77,"~:sigs",["^ ","~:-coerce",["^ ","^9","^4E","^W",["^X",[["^2Q","^1@","^1A","^1W"]]],"^11",null]],"~:jsdoc",["^X",["@interface"]]],"^4C",true,"^9","^3>","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",22,"^T",1,"^S",77,"^4D",["^ ","^1E",["^ ","^4E",[["^2Q","^1@","^1A","^1W"]]]],"~:info",null,"^U",77,"^1F","^1G","^4F",["^ ","^4G",["^ ","^9","^4E","^W",["^X",[["^2Q","^1@","^1A","^1W"]]],"^11",null]],"~:impls",["^6",["^19"]],"^4H",["^X",["@interface"]]],"~$strip-extra-keys-transformer",["^ ","^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",156,"^T",6,"^U",156,"^V",34],"^9","~$spec-tools.core/strip-extra-keys-transformer","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",34,"^T",1,"^S",156,"^U",156,"^1F","^28","^11","Transformer that drop extra keys from `s/keys` specs."],"~$Transformer",["^ ","^Q",["^ ","^4C",true,"^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",25,"^T",14,"^S",80,"^4D",["^ ","^1E",["^ ","^7",[["^2Q"]],"^2O",[["^2Q"]],"^4:",[["^2Q","^3","^1@"]],"^3[",[["^2Q","^3","^1@"]]]],"^U",80,"^4F",["^ ","~:-name",["^ ","^9","^7","^W",["^X",[["^2Q"]]],"^11",null],"~:-options",["^ ","^9","^2O","^W",["^X",[["^2Q"]]],"^11",null],"~:-encoder",["^ ","^9","^4:","^W",["^X",[["^2Q","^3","^1@"]]],"^11",null],"~:-decoder",["^ ","^9","^3[","^W",["^X",[["^2Q","^3","^1@"]]],"^11",null]],"^4H",["^X",["@interface"]]],"^4C",true,"^9","^1R","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",25,"^T",1,"^S",80,"^4D",["^ ","^1E",["^ ","^7",[["^2Q"]],"^2O",[["^2Q"]],"^4:",[["^2Q","^3","^1@"]],"^3[",[["^2Q","^3","^1@"]]]],"^4I",null,"^U",80,"^1F","^1G","^4F",["^ ","^4N",["^ ","^9","^7","^W",["^X",[["^2Q"]]],"^11",null],"^4O",["^ ","^9","^2O","^W",["^X",[["^2Q"]]],"^11",null],"^4P",["^ ","^9","^4:","^W",["^X",[["^2Q","^3","^1@"]]],"^11",null],"^4Q",["^ ","^9","^3[","^W",["^X",[["^2Q","^3","^1@"]]],"^11",null]],"^4J",["^6",["^28"]],"^4H",["^X",["@interface"]]],"~$leaf?",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",366,"^T",8,"^U",366,"^V",13,"^1I",true,"^W",["^X",["^Y",["^X",[["^3"]]]]]],"^1I",true,"^9","~$spec-tools.core/leaf?","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",13,"^13",["^X",[["^3"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",366,"^18","^1G","^U",366,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["^3"]]]]]],"~$*encode?*",["^ ","^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",75,"^T",26,"^U",75,"^V",35,"^1I",true,"^4@",true],"^1I",true,"^9","~$spec-tools.core/*encode?*","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",35,"^T",1,"^4@",true,"^S",75,"^U",75,"^1F","^1G"],"~$deserialize",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",63,"^T",19,"^U",63,"^V",30,"^2L",true,"^W",["^X",["^Y",["^X",[["~$s"]]]]],"^11","Reads specs from a string.\n  TODO: Should optionally read the related Registry entries."],"^9","~$spec-tools.core/deserialize","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",30,"^13",["^X",[["~$s"]]],"^15",null,"^2L",true,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",63,"^18",["^6",["^1G","^1<"]],"^U",63,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["~$s"]]]]],"^11","Reads specs from a string.\n  TODO: Should optionally read the related Registry entries."],"~$into-spec",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",564,"^T",8,"^U",564,"^V",17,"^1I",true,"^W",["^X",["^Y",["^X",[["~$x"]]]]]],"^1I",true,"^9","~$spec-tools.core/into-spec","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",17,"^13",["^X",[["~$x"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",564,"^18",["^6",[null,"^19","^1:","^1;","^1<"]],"^U",564,"^1=",1,"^1>",true,"^W",["^X",["^Y",["^X",[["~$x"]]]]]],"~$->t_spec_tools$core4593",["^ ","^P",null,"^Q",["^ ","^1O",true,"^1P",["^6",["^2?","^1Q","^1S"]],"^1T",["^6",["^1Q","^1S"]],"^1U","^1V","^W",["^X",["^Y",["^X",[["^46","^47","^48","~$form-keys","~$meta4594"]]]]],"^11","Positional factory function for spec-tools.core/t_spec_tools$core4593.","^R",null],"^1P",["^6",["^2?","^1Q","^1S"]],"^9","~$spec-tools.core/->t_spec_tools$core4593","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^13",["^X",[["^46","^47","^48","^4[","^50"]]],"^15",null,"^16",["^X",[null,null]],"^1O",true,"^T",14,"^17",false,"^1U","^1V","^S",583,"^18","^2@","^1=",5,"^1>",true,"^W",["^X",["^Y",["^X",[["^46","^47","^48","^4[","^50"]]]]],"^1T",["^6",["^1Q","^1S"]],"^11","Positional factory function for spec-tools.core/t_spec_tools$core4593."],"^4E",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",78,"^T",4,"^U",78,"^V",11,"^2P","^3>","^11",null,"^W",["^X",["^Y",["^X",[["^2Q","^1@","^1A","^1W"]]]]]],"^2P","^3>","^9","~$spec-tools.core/-coerce","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",11,"^13",["^X",[["^2Q","^1@","^1A","^1W"]]],"^15",null,"^16",["^X",[null,null]],"^T",1,"^17",false,"^S",77,"^18","^1G","^U",78,"^1=",4,"^1>",true,"^W",["^X",["^Y",["^X",[["^2Q","^1@","^1A","^1W"]]]]],"^11",null],"~$type-transformer",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",86,"^T",7,"^U",86,"^V",23,"^W",["^X",["^Y",["^X",[["~$&","^25"]]]]],"^11","Returns a Transformer instance out of options map or Transformer instances.\n  Available options:\n\n  | Key                | Description\n  |--------------------|-----------------\n  | `:name`            | Name of the transformer\n  | `:encoders`        | Map of type `type -> transform`\n  | `:decoders`        | Map of type `type -> transform`\n  | `:default-encoder` | Default `transform` for encoding\n  | `:default-decoder` | Default `transform` for decoding\n\n  Example of a JSON type-transformer:\n\n  ```clojure\n  (require '[spec-tools.core :as st])\n  (require '[spec-tools.transform :as stt])\n\n  (def json-transformer\n    (type-transformer\n      {:name :json\n       :decoders stt/json-type-decoders\n       :encoders stt/json-type-encoders\n       :default-encoder stt/any->any}))\n  ```\n\n  Composed Strict JSON Transformer:\n\n  ```clojure\n  (def strict-json-transformer\n    (st/type-transformer\n      st/json-transformer\n      st/strip-extra-keys-transformer\n      st/strip-extra-values-transformer))\n  ```","^1B",["^ ","^17",true,"^1C",0,"^1=",0,"^13",[["^X",["^25"]]],"^W",["^X",[["~$&","^25"]]],"^16",["^X",[null]]]],"^9","~$spec-tools.core/type-transformer","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",23,"^1B",["^ ","^17",true,"^1C",0,"^1=",0,"^13",[["^X",["^25"]]],"^W",["^X",[["~$&","^25"]]],"^16",["^X",[null]]],"^13",[["^X",["^25"]]],"^15",null,"^1C",0,"^16",["^X",[null]],"^T",1,"^17",true,"^1E",[["^ ","^1C",0,"^17",true,"^1F","^28"]],"^S",86,"^18","^1G","^U",86,"^1=",0,"^1>",true,"^W",["^X",[["~$&","^25"]]],"^11","Returns a Transformer instance out of options map or Transformer instances.\n  Available options:\n\n  | Key                | Description\n  |--------------------|-----------------\n  | `:name`            | Name of the transformer\n  | `:encoders`        | Map of type `type -> transform`\n  | `:decoders`        | Map of type `type -> transform`\n  | `:default-encoder` | Default `transform` for encoding\n  | `:default-decoder` | Default `transform` for decoding\n\n  Example of a JSON type-transformer:\n\n  ```clojure\n  (require '[spec-tools.core :as st])\n  (require '[spec-tools.transform :as stt])\n\n  (def json-transformer\n    (type-transformer\n      {:name :json\n       :decoders stt/json-type-decoders\n       :encoders stt/json-type-encoders\n       :default-encoder stt/any->any}))\n  ```\n\n  Composed Strict JSON Transformer:\n\n  ```clojure\n  (def strict-json-transformer\n    (st/type-transformer\n      st/json-transformer\n      st/strip-extra-keys-transformer\n      st/strip-extra-values-transformer))\n  ```"],"~$coerce",["^ ","^P",null,"^Q",["^ ","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^S",224,"^T",7,"^U",224,"^V",13,"^W",["^X",["^Y",["^X",[["^3","^1@","^1A"],["^3","^1@","^1A","^1W"]]]]],"^11","Coerces the value using a [[Transformer]]. Returns original value for\n  those parts of the value that can't be trasformed.","^1B",["^ ","^17",false,"^1C",4,"^1=",4,"^13",[["^3","^1@","^1A"],["^3","^1@","^1A","^1W"]],"^W",["^X",[["^3","^1@","^1A"],["^3","^1@","^1A","^1W"]]],"^16",["^X",[null,null]]]],"^9","~$spec-tools.core/coerce","^R","/Users/felipe.marques/.cljs/.aot_cache/1.10.773/84B83C3/spec_tools/core.cljc","^V",13,"^1B",["^ ","^17",false,"^1C",4,"^1=",4,"^13",[["^3","^1@","^1A"],["^3","^1@","^1A","^1W"]],"^W",["^X",[["^3","^1@","^1A"],["^3","^1@","^1A","^1W"]]],"^16",["^X",[null,null]]],"^13",[["^3","^1@","^1A"],["^3","^1@","^1A","^1W"]],"^15",null,"^1C",4,"^16",["^X",[null,null]],"^T",1,"^17",false,"^1E",[["^ ","^1C",3,"^17",false,"^1F","^1G"],["^ ","^1C",4,"^17",false,"^1F","^1G"]],"^S",224,"^U",224,"^1=",4,"^1>",true,"^W",["^X",[["^3","^1@","^1A"],["^3","^1@","^1A","^1W"]]],"^11","Coerces the value using a [[Transformer]]. Returns original value for\n  those parts of the value that can't be trasformed."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^@","^A","^D","^E","^E","^E","^G","^H","~$s","^A","^4","^4","^A","^A","^K","^K","^H","^H"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^<","~:description","~:spec-tools.parse/item","~:path","^1W","~:spec-tools.parse/keys-opt","~:cljs.spec.alpha/unknown","~:cljs.spec.alpha/name","~:spec-tools.parse/dispatch","^47","~:spec-tools.parse/keys","~:skip?","~:encoders","~:decoders","~:spec-tools.core/strip-extra-keys","~:pred","~:problems","^46","~:else","~:gen","^4[","~:default","~:via","^9","~:default-decoder","~:value","~:or","^1X","^1Y","~:val","^2;","~:multi-spec","~:tuple","^1Z","~:string","~:vector","~:cljs.spec.alpha/problems","~:name-or-spec","~:spec-tools.parse/items","^1[","~:spec","~:reason","~:cljs.spec.alpha/invalid","^50","^20","~:map-of","~:spec-tools.core/strip-extra-values","^[","~:spec-tools.core/fail-on-extra-keys","^21","~:leaf?","^22","~:and","~:default-encoder","~:spec-tools.core/conform","^3","~:form","~:spec-tools.parse/key->spec","^26","~:json","~:set","~:spec-tools.parse/key","~:spec-tools.parse/value","~:hierarchy","^48","~$spec-tools.core/spec","^23","~:spec-tools.core/default","^42","~:nilable","^24","^25","~:spec-tools.parse/keys-req","~:in"]],"~:order",["^5V","^9","^5D","^5E","^64","^5M","^2;","^1W","^1X","^1Y","^1Z","^1[","^20","^21","^22","^23","^24","^25","^26","^68","^5S","^5F","^60","^61","^5H","^5X","^5N","^65","^5U","^5K","^6>","^6<","^5C","^5O","^5W","^63","^6?","^5<","^5T","^5R","^69","^42","^67","^5[","^6:","^6;","^5Q","^5A","^66","^62","^5=","^5G","^5P","^5L","^6A","^5Y","^5J","^6=","^3","^<","^[","^5@","^5I","^5;","^5?","^5B","^6@","^5>","^5Z","^46","^47","^48","^4[","^50"]],"^11",null]